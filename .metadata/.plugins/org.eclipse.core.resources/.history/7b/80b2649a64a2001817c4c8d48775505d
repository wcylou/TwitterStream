package com.fractallabs.assignment;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.fail;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.time.Instant;
import java.time.LocalDateTime;
import java.time.Month;
import java.time.ZoneId;
import java.util.Map;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import com.fractallabs.assignment.TwitterScanner.TSValue;

import twitter4j.RateLimitStatus;
import twitter4j.Status;
import twitter4j.Twitter;
import twitter4j.TwitterException;
import twitter4j.TwitterFactory;
import twitter4j.auth.OAuth2Token;
import twitter4j.conf.ConfigurationBuilder;


class TwitterScannerTest {
	
	  private TSValue ts;
	  private TwitterScanner twitScan;
	    private ConfigurationBuilder builder;


	  @BeforeEach
	  void setUp() {
		  LocalDateTime dateTime = LocalDateTime.of(2018, Month.AUGUST, 14, 14, 40);
		  Instant instant = dateTime.atZone(ZoneId.of("Europe/Paris")).toInstant();
		  ts = new TSValue(instant, 100);
		  
	        builder = new ConfigurationBuilder();
	        builder.setApplicationOnlyAuthEnabled(true);
	  }

	  @AfterEach
	  void tearDown() {
	    ts = null;
	  }

	  @Test
	  @DisplayName("Test deposit adds to balance.")
	  void test() {
	  }
	 
	  
	  @Test
	    void testAuthWithBuildingConf1() throws Exception {
	        // setup
	        Twitter twitter = new TwitterFactory(builder.build()).getInstance();

	        // exercise & verify
	        twitter.setOAuthConsumer("QQ8vZHPiA5899QYcR1AGT7WR5", "Beh6mEMfRwLrfSdIlpBI1ee12Ia1HuzIMPYVNtFhynPmswFRWJ");
	        OAuth2Token token = twitter.getOAuth2Token();
	        assertEquals("bearer", token.getTokenType());

	        try {
	            twitter.getAccountSettings();
	            fail("should throw TwitterException");

	        } catch (TwitterException e) {
	            assertEquals(403, e.getStatusCode());
	            assertEquals(220, e.getErrorCode());
	            assertEquals("Your credentials do not allow access to this resource", e.getErrorMessage());
	        }
	    }
	  
	  @Test
	    void testPercentageChange() {
	        // setup
	        Twitter twitter = new TwitterFactory(builder.build()).getInstance();

	        // exercise & verify
	        twitter.setOAuthConsumer("QQ8vZHPiA5899QYcR1AGT7WR5", "Beh6mEMfRwLrfSdIlpBI1ee12Ia1HuzIMPYVNtFhynPmswFRWJ");
	        OAuth2Token token = twitter.getOAuth2Token();
	        assertEquals("bearer", token.getTokenType());

	        try {
	            twitter.getAccountSettings();
	            fail("should throw TwitterException");

	        } catch (TwitterException e) {
	            assertEquals(403, e.getStatusCode());
	            assertEquals(220, e.getErrorCode());
	            assertEquals("Your credentials do not allow access to this resource", e.getErrorMessage());
	        }
	    }

}
